<template>
	<view class="bg-dark">
		<video src="/static/video/2a63d467-21f2-47d3-9374-ad6b6510195d.mp4" id="video" ref="video" :controls="false"
			style="width: 750rpx; height:225px" @fullscreenchange="fullScreenChange" @timeupdate="timeupdate"
			@play="isplay=true" @pause="isplay=false" show-center-play-btn="false" show-fullscreen-btn="false"
			show-progress="false"
			poster="https://ts1.cn.mm.bing.net/th/id/R-C.9d8a96bd65a019ba06cb59b286049cf9?rik=bs0DV1%2feLLyv0w&riu=http%3a%2f%2fhao5.qhimg.com%2ft013cdbbf054e85312e.jpg%3fsize%3d1282x818&ehk=CqVoMD2%2bobbh1kMr%2bBq6sKvDE3qiw8lnE5D3QrE6nsA%3d&risl=&pid=ImgRaw&r=0">
			<view class="position-absolute flex align-center justify-center" :style="videoFullScreen">
				<!-- 双击事件蒙板 -->
				<view @touchstart="modalTouchS" @touchmove="modalTouchM" @touchend="modalTouchE"
					class="position-absolute  left-0 right-0 bottom-0 top-0"></view>
				<!-- 提示框 -->
				<view v-if="staticTime" class="p-2 rounded" style="background-color: rgba(0,0,0,0.3);">
					<text v-if="promptBoxStatus.type=='time'"
						class="font text-white">{{currentTime|formatTime}}/{{duration|formatTime}}</text>
					<text v-if="promptBoxStatus.type=='message'"
						class="font text-white">{{promptBoxStatus.message}}</text>

				</view>
				<!-- 全屏后的控制条 -->
				<!-- 顶部 -->
				<view v-if="bottomOrTopControlBarShow && fullScreenStatus"
					class="video-opctay-top position-absolute top-0 left-0 right-0">
					<!-- <view style="height: 26px;"></view> -->
					<view style="height: 26px;" class="flex align-center">
						<view class="video-btn " @click="fullOrExitScreen()">
							<!-- 返回按钮 -->
							<text class="iconfont" style="font-size: 20px; color:#036EB8">&#xe623;</text>
							<!-- 这里的&#xe623;是阿里图标库的图像在线代码 -->
							<!-- text标签不要换行，在nvue中默认换行他也换行 -->
						</view>
						<view class="flex justify-center align-center"><text
								class="ml-3 text-white">标题sdsbajdajhbaddHSJfFBJJFfjhbh</text></view>
					</view>
				</view>

				<!-- 底部 -->
				<view v-if="bottomOrTopControlBarShow && fullScreenStatus"
					class=" video-opctay-bot position-absolute bottom-0 left-0 right-0">
					<view style="height: 88px;">
						<!-- 控制条的样式配置！！！！非常重要！！！ -->
						<view class="flex-1" style="padding-left: 15px; padding-right:15px;">
							<progress :curTime="currentTime" :duration="duration" @valueChange="propressValueChange"
								@update="screenTimeUpdate"></progress>
						</view>

						<view class="flex align-stretch justify-between" style="height: 40px;">
							<!-- 	底部小图标的排列，外层justiffy-between两边分散 -->
							<!-- align-stretch是css flex样式中align-item:stretch属性，作用是	默认。项目被拉伸以适合容器。 -->
							<!-- 左边的图标集合 -->
							<view class="flex">
								<view class="video-btn" @click="videoPlayOrPaused()">
									<!-- 播放按钮 -->
									<text class="iconfont" v-if="!isplay"
										style="font-size: 30px; color:#036EB8">&#xe62f;</text>
									<!-- 暂停按钮 -->
									<text class="iconfont" v-else style="font-size: 30px; color:#036EB8">&#xe626;</text>
								</view>

								<view class="flex align-center justify-center" style="width: 80px;"><text
										class="font-sm text-white">{{currentTime|formatTime}}/{{duration|formatTime}}</text>
								</view><!-- 时间文本显示 -->

								<view class="video-btn ">
									<!-- 弹幕按钮 -->
									<text @click="fullOrExitScreen()" class="iconfont"
										style="font-size: 30px; color:#036EB8">&#xe665;</text>
								</view>

							</view>
							<!-- 右边的图标集合 -->
							<view class="flex">
								<view class="flex align-center"
									style="height: 40px; padding-left:15px;padding-right:15px ;">
									<text class="text-white" style="font-size: 15px;">选集</text>
								</view>

								<view class="flex align-center"
									style="height: 40px; padding-left:15px;padding-right:15px ;">
									<text class="text-white" style="font-size: 15px;">清晰度</text>
								</view>

								<view class="flex align-center"
									style="height: 40px; padding-left:15px;padding-right:15px ;">
									<text class="text-white" style="font-size: 15px;">倍数</text>
								</view>

							</view>



						</view>

					</view>
					<view class="flex align-center" style="height: 40px;">

					</view>

				</view>

                <!-- 弹框 -->
				<view v-if="fullScreenStatus && popUpFrame" class="position-absolute top-0 right-0 bottom-0 flex flex-column" style="background-color: rgba(0,0,0,0.8);">
					<!-- 速度 -->
					<view class="flex-1" style="width: 100px;">
						
					</view>
					
				</view>

			</view>
			<!-- nvue的渲染是从上向下进行的渲染，写在下面的渲染速度高于上面 :style动态的绑定全屏与单竖屏的高宽-->
		</video>

		<!--  不是全屏 -->
		<!-- 自定义视频顶部 -->
		<view v-if="bottomOrTopControlBarShow && !fullScreenStatus"
			class="video-opctay-top position-fixed top-0 left-0 right-0">
			<!-- <view :style="'height'+statusBarHeight+'px'"></view> -->
			<view style="height: 26px;"></view>
			<view style="height: 26px;" class="flex align-center">
				<view class="video-btn " @click="back()">
					<!-- 返回按钮 -->
					<text class="iconfont" style="font-size: 20px; color:#036EB8">&#xe623;</text>
					<!-- 这里的&#xe623;是阿里图标库的图像在线代码 -->
					<!-- text标签不要换行，在nvue中默认换行他也换行 -->
				</view>
			</view>
		</view>

		<!-- 自定义视频底部-->
		<view v-if="bottomOrTopControlBarShow && !fullScreenStatus"
			class=" video-opctay-bot position-fixed bottom-0 left-0 right-0">
			<view class="flex align-stretch" style="height: 40px;">
				<!-- align-stretch是css flex样式中align-item:stretch属性，作用是	默认。项目被拉伸以适合容器。 -->
				<view class="video-btn" @click="videoPlayOrPaused()">
					<!-- 播放按钮 -->
					<text class="iconfont" v-if="!isplay" style="font-size: 30px; color:#036EB8">&#xe62f;</text>
					<!-- 暂停按钮 -->
					<text class="iconfont" v-else style="font-size: 30px; color:#036EB8">&#xe626;</text>
				</view>
				<!-- 控制条的样式配置！！！！非常重要！！！ -->
				<view class="flex-1">
					<progress :curTime="currentTime" :duration="duration" @valueChange="propressValueChange"
						@update="screenTimeUpdate"></progress>
				</view>
				<view class="flex align-center justify-center" style="width: 80px;"><text
						class="font-sm text-white">{{currentTime|formatTime}}/{{duration|formatTime}}</text>
				</view><!-- 时间文本显示 -->

				<view class="video-btn ">
					<!-- 放大按钮 -->
					<text @click="fullOrExitScreen()" class="iconfont"
						style="font-size: 30px; color:#036EB8">&#xe60d;</text>
				</view>

			</view>
		</view>
	</view>
</template>

<script>
	//进度条组件引入
	import progress from "../components/progress.vue"

	let videoCtx = null //获取video的节点

	let res = uni.getSystemInfoSync() //同步获取页面的状态栏信息

	let promptBoxStatusShowSTOut = null //提示框的定时器

	let controlStOut = null //控制条显示的定时器
	const domModule = uni.requireNativePlugin(
		'dom') //Weex 提供 DOM.addRule 以加载自定义字体。开发者可以通过指定 font-family加载 iconfont 和 custom font。开发者可以使用下面的代码加载自定义字体：
	export default {

		data() {
			return {
				isplay: false, //播放的状态
				statusBarHeight: 0, //状态栏的信息
				currentTime: 0, //当前时长
				duration: 0, //总时长
				windowHeight: 0,
				windowWidth: 0,
				screenStatus: false, //默认不是全屏
				staticTime: false, //屏幕中间时长拖动提示框显示与否
				promptBoxStatus: {
					type: 'message',
					message: '提示'
				},

				bottomOrTopControlBarShow: true, //顶部或底部控制条显示与否

				oldTouchs: {

				},
				oldValue: {

				},
				dbcount: 0, //点击次数
				touchType: null,
				fullScreenStatus: false, //全屏状态，默认不是全屏
				popUpFrame:false,//弹框
			}
		},

		provide() { //依赖注入,要和inject一起使用
			return {
				v: this
			}
		},

		computed: {
			//屏幕状态大小计算
			videoFullScreen() {
				return this.screenStatus ? `width:${this.windowHeight}px; height:${this.windowWidth}px` :
					'width:750rpx;height:225px;' //这里的是计算全屏后的大小，用的应该是uni.getWindowInfo(),并且宽高显示好像相反
			},

			// modalStyle() {
			// 	let top = this.statusBarHeight + 44
			// 	return `top:${top}px;bottom:44px` //计算蒙板的高度
			// }
		},

		//组件
		components: {
			progress
		},

		filters: {
			//时间过滤器，vue3.0已抛弃
			formatTime(result) {
				var h = Math.floor(result / 3600) < 10 ? '0' + Math.floor(result / 3600) : Math.floor(result / 3600);

				var m = Math.floor((result / 60 % 60)) < 10 ? '0' + Math.floor((result / 60 % 60)) : Math.floor((result /
					60 % 60));

				var s = Math.floor((result % 60)) < 10 ? '0' + Math.floor((result % 60)) : Math.floor((result % 60));
				return result = result > 3600 ? (h + ':' + m + ':' + s) : m + ':' + s
			}
		},


		created() { //在页面创建的时候
			// console.log(uni.getSystemInfoSync())
			let screen = uni.getWindowInfo()
			this.statusBarHeight = res.statusBarHeight

			this.windowHeight = screen.screenHeight
			this.windowWidth = screen.screenWidth //400

			domModule.addRule('fontFace', {
				'fontFamily': "iconfont", //这里的fontfamily命名最好是和class中fontsize一致
				'src': "url('http://at.alicdn.com/t/c/font_2852955_rd2gu9j5ej.ttf')" //阿里图标库的在线生成地址网页链接
			});
		},

		mounted() {
			// console.log(this.$refs)this.$refs可以获取所有class被设置为ref的节点属性
			videoCtx = this.$refs.video
		}, //直接使用 ref，例如 this.$refs.video1

		methods: {

			modalTouchS(e) {
				this.oldTouchs = e.changedTouches[0]

				this.oldValue = {
					currentTime: this.currentTime
				} //旧的当前时间
			}, //蒙版开始触摸

			modalTouchM(e) {
				let newTouchs = e.changedTouches[0] //获取新的坐标
				if (!this.touchType) {
					this.touchType = Math.abs(newTouchs.pageX - this.oldTouchs.pageX) > 20 ? 'current' : null

					if (this.touchType === 'current') {
						videoCtx.pause()
					}
				} else if (this.touchType === 'current') {
					this.promptBoxStatusShow({
						type: "time",
						autoClose: false
					})
					this.controlBarShowStatus()

					let newCurrentTime = (newTouchs.pageX - this.oldTouchs.pageX) / 250 * this.duration * 2 + this.oldValue
						.currentTime * 1 //核心算法拖动屏幕

					newCurrentTime = newCurrentTime > this.duration ? this.duration : newCurrentTime

					newCurrentTime = newCurrentTime < 0 ? 0 : newCurrentTime

					this.currentTime = newCurrentTime
				}

			}, //蒙版移动中

			modalTouchE(e) {
				if (this.touchType === 'current') {
					videoCtx.seek(this.currentTime)
					videoCtx.play()

				} else {
					if (this.dbcount === 1 || this.dbcount === 0) {
						this.dbcount++
					}
					if (this.dbcount > 0) {
						setTimeout(() => {
							if (this.dbcount === 1) {
								// console.log("单击")

								this.controlShowOrHide()
							} //单击
							if (this.dbcount === 2) {
								this.videoPlayOrPaused()
								// console.log("双击")
							} //双击
							this.dbcount = 0 //不论是双击还是单击最后都等于0
						}, 250)
					}
				}
				this.touchType = null
				this.staticTime = false //关闭提示框
			}, //蒙版结束，自定义单击，双击

			//显示或隐藏控制条
			controlShowOrHide() {
				this.bottomOrTopControlBarShow ? this.controlBarHideStatus() : this.controlBarShowStatus()
			},

			controlBarShowStatus() {
				// this.bottomControlBarShow = true
				// this.topControlBarShow = true
				this.bottomOrTopControlBarShow = true

				if (controlStOut) {
					clearTimeout(controlStOut)
				}
				controlStOut = setTimeout(() => {
					this.controlBarHideStatus()
					controlStOut = null
				}, 3000)
			}, //控制条显示状态

			controlBarHideStatus() {
				this.bottomOrTopControlBarShow = false
			}, //控制条隐藏状态

			back() { //返回
				// uni.navigateBack({
				// 	delta:1
				// })
				uni.navigateTo({
					url: "/pages/index/index"
				})
			},

			videoPlayOrPaused() { //播放停止按钮
				this.promptBoxStatusShow({
					message: this.isplay ? '暂停' : '播放'
				})

				if (this.isplay) {
					videoCtx.pause()
				} else {
					this.controlBarShowStatus() //控制条显示状态
					videoCtx.play()
				}
			},

			fullScreenChange(e) {
				this.fullScreenStatus = e.detail.fullScreen
			}, //当视频进入和退出全屏时触发，event.detail = {fullScreen, direction}，direction取为 vertical 或 horizontal

			fullOrExitScreen() {
				if (this.fullScreenStatus) {
					this.screenStatus = false
					videoCtx.exitFullScreen() //退出全屏
				} else {
					this.screenStatus = true
					videoCtx.requestFullScreen() //进入全屏
				}
				//requestFullScreen进入全屏，可传{direction}参数
				//exitFullScreen退出全屏
			}, //点击事件进入或者退出全屏


			timeupdate(e) {
				if (!this.staticTime) {
					this.currentTime = parseInt(e.detail.currentTime)
					this.duration = parseInt(e.detail.duration)
				}
				// console.log(e.detail.currentTime, e.detail.duration)
			}, //播放进度变化时触发，event.detail = {currentTime, duration} 。触发频率 250ms 一次

			propressValueChange(e) {
				videoCtx.seek(e) //api方法 seek(position)跳转到指定位置，单位 s
				this.staticTime = false //@touchend api在propress子组件中进度条拖动事件结束时调用
				videoCtx.play()
			},

			screenTimeUpdate(e) { //进度条变化的时候
				videoCtx.pause()
				this.staticTime = true //屏幕中间时长拖动提示框显示与否
				this.currentTime = e
				this.promptBoxStatusShow({
					type: "time",
					autoClose: false //
				})
				this.controlBarShowStatus() //控制条显示状态
			}, //从组件progress传来的值，e是子组件中的currtTime

			promptBoxStatusShow(options) {
				this.promptBoxStatus.type = options.type || 'message'
				this.promptBoxStatus.message = options.message || '提示'
				this.staticTime = true //屏幕中间时长拖动提示框显示与否
				if (options.autoClose !== false) { ///这里的autoClose是自定义属性,这里不太明白
					if (promptBoxStatusShowSTOut) {
						clearTimeout(promptBoxStatusShowSTOut)
					}
					promptBoxStatusShowSTOut = setTimeout(() => {
						this.staticTime = false
						promptBoxStatusShowSTOut = null
					}, 500) //定时器定时显示提示消失
				}
			}

		}

	}
</script>

<style>
	.video-btn {
		width: 44px;
		height: 44px;
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: center;

	}

	.video-opctay-top {
		background-image: linear-gradient(to top, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.4));
	}

	.video-opctay-bot {
		background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.7));
	}
</style>
